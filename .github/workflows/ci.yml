name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      DB_USERNAME: testuser
      DB_PASSWORD: testpass
      SPRING_PROFILES_ACTIVE: dev
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: reservation-system
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run Backend Tests
        run: ./gradlew test --no-daemon

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    defaults:
      run:
        working-directory: backend
    env:
      DB_USERNAME: testuser
      DB_PASSWORD: testpass
      SPRING_PROFILES_ACTIVE: dev
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: reservation-system
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Wait for Postgres
        run: |
          for i in {1..15}; do
            nc -z localhost 5432 && echo "Postgres is ready!" && break
            echo "Waiting for Postgres..."
            sleep 3
          done
      - name: Build Project
        run: ./gradlew build --no-daemon

  test-frontend:
    name: Test Frontend (Playwright)
    runs-on: ubuntu-latest
    needs: test-backend  # Only need tests to pass, not build
    defaults:
      run:
        working-directory: frontend
    env:
      DB_USERNAME: testuser
      DB_PASSWORD: testpass
      SPRING_PROFILES_ACTIVE: dev

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: reservation-system
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java for backend
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Wait for Postgres
        run: |
          for i in {1..15}; do
            nc -z localhost 5432 && echo "Postgres is ready!" && break
            echo "Waiting for Postgres..."
            sleep 3
          done

      - name: Build backend for testing
        run: ./gradlew build --no-daemon -x test
        working-directory: backend
        env:
          DB_USERNAME: testuser
          DB_PASSWORD: testpass
          SPRING_PROFILES_ACTIVE: dev

      - name: Start backend server
        run: |
          cd ../backend
          # List all JAR files for debugging
          echo "Available JAR files:"
          ls -la build/libs/
          
          # Use the executable JAR (without -plain suffix)
          if [ -f "build/libs/reservation-system-0.0.1-SNAPSHOT.jar" ]; then
            JAR_FILE="build/libs/reservation-system-0.0.1-SNAPSHOT.jar"
          else
            # Fallback: find any JAR that doesn't contain 'plain'
            JAR_FILE=$(find build/libs/ -name "*.jar" -not -name "*plain*" | head -1)
          fi
          
          echo "Starting backend with JAR: $JAR_FILE"
          java -jar "$JAR_FILE" > ../frontend/backend.log 2>&1 &
          echo $! > ../frontend/backend.pid
          echo "Backend started with PID: $(cat ../frontend/backend.pid)"
        env:
          DB_USERNAME: testuser
          DB_PASSWORD: testpass
          SPRING_PROFILES_ACTIVE: dev

      # Node setup
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install frontend dependencies
        run: npm install

      - name: Install Playwright browsers and dependencies
        run: npx playwright install --with-deps

      - name: Start frontend dev server
        run: |
          npm run start > frontend.log 2>&1 &
          echo $! > frontend.pid
          echo "Frontend started with PID: $(cat frontend.pid)"

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 10
          
          # Check if processes are still running
          if [ -f backend.pid ] && kill -0 $(cat backend.pid) 2>/dev/null; then
            echo "Backend process is running"
          else
            echo "Backend process is not running!"
            echo "Backend logs:"
            cat backend.log
            exit 1
          fi
          
          if [ -f frontend.pid ] && kill -0 $(cat frontend.pid) 2>/dev/null; then
            echo "Frontend process is running"
          else
            echo "Frontend process is not running!"
            echo "Frontend logs:"
            cat frontend.log
            exit 1
          fi
          
          # Wait for backend port
          echo "Waiting for backend on port 8080..."
          for i in {1..30}; do
            if nc -z localhost 8080; then
              echo "Backend port is ready!"
              break
            fi
            echo "Waiting for backend port... ($i/30)"
            sleep 3
          done
          
          # Wait for frontend port
          echo "Waiting for frontend on port 3000..."
          for i in {1..30}; do
            if nc -z localhost 3000; then
              echo "Frontend port is ready!"
              break
            fi
            echo "Waiting for frontend port... ($i/30)"
            sleep 3
          done
          
          echo "Both services should be ready now"
        timeout-minutes: 4

      - name: Run Playwright tests
        run: npm run test

      - name: Cleanup processes
        if: always()
        run: |
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi
          if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm install
      - name: Build frontend
        run: npm run build